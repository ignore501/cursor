import pytest
from src.utils.utils import (
    format_date,
    format_time,
    format_number,
    format_percentage,
    is_valid_email,
    is_valid_url,
    parse_date,
    sanitize_text,
    truncate_message,
    format_message,
    parse_command_args,
    validate_email,
    validate_phone,
    sanitize_filename,
    ensure_dir,
    generate_random_string,
    format_learning_result
)
import logging
from datetime import datetime

def test_format_date():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã."""
    # –¢–µ—Å—Ç —Å –æ–±—ä–µ–∫—Ç–æ–º datetime
    date = datetime(2024, 3, 15)
    assert format_date(date) == "15.03.2024"
    
    # –¢–µ—Å—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π –¥–∞—Ç—ã
    assert format_date("2024-03-15") == "15.03.2024"
    assert format_date("15.03.2024") == "15.03.2024"
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    with pytest.raises(ValueError):
        format_date("invalid_date")

def test_format_time():
    assert format_time("09:00:00") == "09:00"

def test_format_number():
    assert format_number(1234567) == "1 234 567"

def test_format_percentage():
    assert format_percentage(0.1234) == "12.34%"

def test_is_valid_email():
    assert is_valid_email("test@example.com")
    assert not is_valid_email("test@com")

def test_parse_date():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã."""
    # –¢–µ—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º DD.MM.YYYY
    assert parse_date("15.03.2024") == datetime(2024, 3, 15)
    
    # –¢–µ—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º YYYY-MM-DD
    assert parse_date("2024-03-15") == datetime(2024, 3, 15)
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    with pytest.raises(ValueError):
        parse_date("invalid_date")

def test_is_valid_url():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL."""
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
    assert is_valid_url("https://example.com")
    assert is_valid_url("http://example.com")
    assert is_valid_url("https://example.com/path")
    assert is_valid_url("https://example.com/path?param=value")
    
    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
    assert not is_valid_url("not_a_url")
    assert not is_valid_url("ftp://example.com")
    assert not is_valid_url("https://")
    assert not is_valid_url("http://")

def test_sanitize_text():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    # –¢–µ—Å—Ç —Å HTML-—Ç–µ–≥–∞–º–∏
    assert sanitize_text("<p>Test</p>") == "Test"
    assert sanitize_text("<script>alert('test')</script>") == "alert('test')"
    
    # –¢–µ—Å—Ç —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    assert sanitize_text("Test\n\r\t") == "Test"
    assert sanitize_text("  Test  ") == "Test"
    
    # –¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏
    assert sanitize_text("Test üòä") == "Test üòä"
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert sanitize_text("") == ""
    assert sanitize_text(None) == ""

def test_truncate_text():
    """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    # –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    long_text = "This is a very long text that needs to be truncated"
    assert truncate_message(long_text, 20) == "This is a very long..."
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    short_text = "Short text"
    assert truncate_message(short_text, 20) == short_text
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert truncate_message("", 20) == ""
    assert truncate_message(None, 20) == ""
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
    assert truncate_message(long_text, -1) == "..."

def test_generate_random_string():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω–æ–π
    assert len(generate_random_string(10)) == 10
    assert len(generate_random_string(20)) == 20
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤
    assert generate_random_string(10, "abc") == "".join(["a", "b", "c"][i % 3] for i in range(10))
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    with pytest.raises(ValueError):
        generate_random_string(10, "")
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
    with pytest.raises(ValueError):
        generate_random_string(-1)

def test_date_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è –¥–∞—Ç."""
    # –¢–µ—Å—Ç —Å –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º –≥–æ–¥–æ–º
    assert format_date("2024-02-29") == "29.02.2024"
    
    # –¢–µ—Å—Ç —Å –Ω–∞—á–∞–ª–æ–º –≥–æ–¥–∞
    assert format_date("2024-01-01") == "01.01.2024"
    
    # –¢–µ—Å—Ç —Å –∫–æ–Ω—Ü–æ–º –≥–æ–¥–∞
    assert format_date("2024-12-31") == "31.12.2024"
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    with pytest.raises(ValueError):
        format_date("2024-02-30")  # 30 —Ñ–µ–≤—Ä–∞–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

def test_url_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è URL."""
    # –¢–µ—Å—Ç —Å –ø–æ–¥–¥–æ–º–µ–Ω–∞–º–∏
    assert is_valid_url("https://sub.example.com")
    assert is_valid_url("https://sub.sub.example.com")
    
    # –¢–µ—Å—Ç —Å –ø–æ—Ä—Ç–æ–º
    assert is_valid_url("https://example.com:8080")
    
    # –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    assert is_valid_url("https://example.com?param1=value1&param2=value2")
    
    # –¢–µ—Å—Ç —Å —è–∫–æ—Ä–µ–º
    assert is_valid_url("https://example.com#section")
    
    # –¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
    assert is_valid_url("https://–ø—Ä–∏–º–µ—Ä.—Ä—Ñ")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    assert not is_valid_url("https://example.com/path with spaces")

def test_text_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
    # –¢–µ—Å—Ç —Å HTML-—Å—É—â–Ω–æ—Å—Ç—è–º–∏
    assert sanitize_text("&lt;p&gt;Test&lt;/p&gt;") == "<p>Test</p>"
    
    # –¢–µ—Å—Ç —Å Unicode-—Å–∏–º–≤–æ–ª–∞–º–∏
    assert sanitize_text("Test\u2028\u2029") == "Test"
    
    # –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    long_text = "x" * 1000
    assert len(truncate_message(long_text, 100)) == 100
    
    # –¢–µ—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    assert sanitize_text("Line1\nLine2\r\nLine3") == "Line1Line2Line3"
    
    # –¢–µ—Å—Ç —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π
    assert sanitize_text("Tab\tTab") == "TabTab"

def test_truncate_message():
    """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    # –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    long_text = "This is a very long text that needs to be truncated"
    assert truncate_message(long_text, 20) == "This is a very long..."
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    short_text = "Short text"
    assert truncate_message(short_text, 20) == short_text
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    assert truncate_message("", 20) == ""
    assert truncate_message(None, 20) == ""
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π
    assert truncate_message(long_text, -1) == "..."

def test_format_learning_result():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è."""
    # –¢–µ—Å—Ç —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    assert format_learning_result(0.85) == "85%"
    assert format_learning_result(1.0) == "100%"
    
    # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    assert format_learning_result(0.0) == "0%"
    
    # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    assert format_learning_result(-0.5) == "-50%"
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    with pytest.raises(ValueError):
        format_learning_result("invalid") 